import os
import shutil
from agents.base_agent import AgentConfig, BaseAgent
from agents.dataclasses.agent_lm_spec import AgentLMConfig
from phase_responses.phase_response import PhaseResponse
from phases.base_phase import BasePhase
from agents.executor_agent.executor_agent import ExecutorAgent, ExecutorAgentConfig
from agents.exploit_agent.exploit_agent import ExploitAgent, ExploitAgentConfig
from resources.base_resource import BaseResource
from resources.init_files_resource import InitFilesResource, InitFilesResourceConfig
from resources.utils import contains_setup
from responses.answer_response import AnswerResponseInterface
from responses.response import Response
from resources.kali_env_resource import KaliEnvResource, KaliEnvResourceConfig
from resources.docker_resource import DockerResource, DockerResourceConfig
from typing import Any, Dict, List, Optional, Tuple, Type
from resources.setup_resource import SetupResource, SetupResourceConfig
from utils.logger import get_main_logger
from workflows.base_workflow import BaseWorkflow


logger = get_main_logger(__name__)

class ExploitPhase(BasePhase):
    AGENT_CLASSES = [ExecutorAgent, ExploitAgent]

    def __init__(self, workflow: 'BaseWorkflow', **kwargs):
        self.model = kwargs.get('model')
        self.bounty_number = kwargs.get('bounty_number')
        super().__init__(workflow, **kwargs)

    def define_agents(self) -> Dict[str, Tuple[Type[BaseAgent], Optional[AgentConfig]]]:
        # assume we get model through some kwargs situation with the Message
        executor_lm_config = AgentLMConfig.create(model=self.model)
        # Create the executor_config
        executor_config = ExecutorAgentConfig(
            lm_config=executor_lm_config,
            target_host=self.workflow.repo_metadata["target_host"],
        )

        exploit_config = ExploitAgentConfig(
            bounty_dir=os.path.join("bounties", f"bounty_{self.bounty_number}"),
            task_dir=self.workflow.task_dir
        )

        return {"executor_agent": (ExecutorAgent, executor_config),
                "exploit_agent": (ExploitAgent, exploit_config)
        }
    
    def define_resources(self) -> Dict[str, Tuple[Type['BaseResource'], Any]]:
        """
        Define resource classes and their configurations required by the ExploitPhase.

        Returns:
            Dict[str, Tuple[Type[BaseResource], Any]]: Mapping of resource_id to (ResourceClass, ResourceConfig).
        """
        logger.debug(f"Entering define_resources for ExploitPhase")

        files_dir_name = self.workflow.bounty_metadata.get('files_dir', 'codebase')
        vulnerable_commit = self.workflow.bounty_metadata.get('vulnerable_commit', 'main')
        tmp_dir_name = "tmp"
        tmp_dir = os.path.join(self.workflow.task_dir, tmp_dir_name)

        resource_configs = {
            "init_files": (
                InitFilesResource,
                InitFilesResourceConfig(
                    task_dir=self.workflow.task_dir,
                    files_dir_name=files_dir_name,
                    tmp_dir_name=tmp_dir_name,
                    bounty_number=self.bounty_number,
                    vulnerable_commit=vulnerable_commit
                )
            ),
            "kali_env": (
                KaliEnvResource,
                KaliEnvResourceConfig(
                    task_dir=self.workflow.task_dir,
                    bounty_number=self.workflow.bounty_number,
                    volumes={
                        os.path.abspath(tmp_dir): {"bind": "/app", "mode": "rw"},
                    }
                )
            ),
            "docker": (
                DockerResource,
                DockerResourceConfig()
            )
        }

        setup_repo_env_script = os.path.join(str(self.workflow.task_dir), "setup_repo_env.sh")
        if contains_setup(setup_repo_env_script):
            resource_configs["repo_resource"] = (
                SetupResource,
                SetupResourceConfig(
                    bounty_level_setup=False,
                    task_dir=self.workflow.task_dir,
                )
            )

        setup_bounty_env_script = os.path.join(str(self.workflow.task_dir), "setup_bounty_env.sh")
        if contains_setup(setup_bounty_env_script):
            resource_configs["bounty_resource"] = (
                SetupResource,
                SetupResourceConfig(
                    bounty_level_setup=True,
                    task_dir=self.workflow.task_dir,
                    bounty_number=self.workflow.bounty_number,
                )
            )

        logger.debug(f"Exiting define_resources for ExploitPhase")
        return resource_configs

    def run_one_iteration(
        self,
        phase_response: PhaseResponse,
        agent_instance: Any,
        previous_output: Optional[Response]
    ) -> Response:
        """
        1) Call the agent with the previous_response as input (if any).
        2) If ExecutorAgent produces an AnswerResponseInterface, treat as hallucination -> finalize & done.
        3) If ExploitAgent produces AnswerResponseInterface, treat as exploit success -> finalize & done.
        4) Otherwise continue.
        """
        # Prepare input response list for agent
        input_list = []
        if previous_output is not None:
            input_list.append(previous_output)

        response = agent_instance.run(input_list)
        phase_response.add_agent_response(response)

        # Determine which agent name was used in this iteration
        _, agent_instance = self._get_current_agent()

        # Check for hallucination (ExecutorAgent)
        if isinstance(agent_instance, ExecutorAgent):
            if isinstance(response, AnswerResponseInterface):
                logger.status("Executor agent hallucinated an answer!")
                self._set_phase_summary("completed_with_hallucination")
                phase_response.set_complete()
                return response

        # Check for exploit success (ExploitAgent)
        elif isinstance(agent_instance, ExploitAgent):
            if response.success:
                logger.status("Exploit successful!", True)
                self._set_phase_summary("exploit_success")
                phase_response.set_complete()
                phase_response.set_success()
                return response

        return response

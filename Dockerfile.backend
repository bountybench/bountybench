# Use the full Python 3.11 image
FROM python:3.11

# Set the working directory
WORKDIR /app

# Install build tools and other dependencies
# - Install tools such as nc, tree which are not included in the Debian image
# - Install dependencies for `docker` and `docker compose`
# - Install Node.js and npm
RUN apt-get update && \
    apt-get install -y \
    build-essential \
    gcc \
    make \
    wget \
    git \
    libffi-dev \
    libssl-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    curl \
    ca-certificates \
    gnupg \
    netcat-openbsd \
    tree \
    jq \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
    && echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get update \
    && apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-compose-plugin \
    nodejs \
    && rm -rf /var/lib/apt/lists/*

# Configures git; Necessary for git commands to work in the container
RUN git config --global user.email "temp@example.com" \
    && git config --global user.name "Temp"

# Set BLIS_ARCH environment variable
ENV BLIS_ARCH=generic

# Install Miniconda based on architecture (base image is multi-arch)
ENV CONDA_DIR=/opt/conda
ENV PATH="${CONDA_DIR}/bin:${PATH}"
RUN ARCH=$(uname -m) && \ 
    if [ "$ARCH" = "x86_64" ]; then \
    MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"; \
    elif [ "$ARCH" = "aarch64" ]; then \
    MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh"; \
    else \
    echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    wget --quiet "$MINICONDA_URL" -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p ${CONDA_DIR} && \
    rm /tmp/miniconda.sh && \
    ${CONDA_DIR}/bin/conda init bash && \
    echo ". ${CONDA_DIR}/etc/profile.d/conda.sh" >> ~/.bashrc && \
    ${CONDA_DIR}/bin/conda config --set always_yes yes --set changeps1 no

# Copy the requirements file into the container
COPY requirements.txt .

# Create base conda environment
# - Upgrade pip, setuptools, and wheel
# - Install Python dependencies
ENV CONDA_ENV_NAME=backend_env
RUN bash -c "source ${CONDA_DIR}/bin/activate && \
    ${CONDA_DIR}/bin/conda create -n ${CONDA_ENV_NAME} python=3.11 -y && \
    ${CONDA_DIR}/bin/conda install -n ${CONDA_ENV_NAME} pip -y && \
    ${CONDA_DIR}/bin/conda run -n ${CONDA_ENV_NAME} pip install --upgrade pip setuptools wheel && \
    ${CONDA_DIR}/bin/conda run -n ${CONDA_ENV_NAME} pip install -r requirements.txt"

# Copy the entire project into the container
COPY . .

RUN touch .env

# Copy the shell script for DinD docker daemon
COPY tools/dockerd-entrypoint.sh /usr/local/bin/dockerd-entrypoint.sh
RUN chmod +x /usr/local/bin/dockerd-entrypoint.sh

# Expose the backend port (assuming the server runs on port 7999)
EXPOSE 7999

# Run the docker daemon in the background
ENTRYPOINT ["dockerd-entrypoint.sh"]

# Start the backend server
CMD ["bash", "-c", "source $CONDA_DIR/bin/activate ${CONDA_ENV_NAME} && python -m backend.main"]
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Delete old caches
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key !== '${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}') {
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log(`Deleted cache with ID ${cache.id}`)
              }
            }

      - name: Set up GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
      - name: Set up Git user information
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Check for label to run all tests
        id: check_label
        run: |
          labels=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' 2>/dev/null || echo "")
          echo "Labels: $labels"
          if echo "$labels" | grep -q "run all tests"; then
            echo "all_tests=true" >> $GITHUB_ENV
          else
            echo "all_tests=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed files
        id: get_changed_files
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }} > changed_files.txt
            echo "changed_files_count=$(wc -l < changed_files.txt)" >> $GITHUB_ENV
          else
            echo "changed_files_count=0" >> $GITHUB_ENV
          fi

      - name: Docker Cleanup before pulling new image
        if: env.changed_files_count != '0' || env.all_tests == 'true'
        run: |
          docker system prune -af
          docker image prune -af

      - name: Pull Docker Container
        if: env.changed_files_count != '0' || env.all_tests == 'true'
        run: |
          docker pull --quiet cybench/bountyagent:latest
          docker manifest inspect cybench/bountyagent:latest

      - name: Display disk space after pulling image
        if: env.changed_files_count != '0' || env.all_tests == 'true'
        run: df -H

      - name: Create Docker Network
        if: env.changed_files_count != '0' || env.all_tests == 'true'
        run: docker network create shared_net || true
        
      - name: Run backend tests
        run: |
          if [[ "${{ env.all_tests }}" == "true" ]]; then
            python -m tests.runner
          elif [[ ${{ github.event_name }} == 'pull_request' ]] && [[ "${{ env.changed_files_count }}" -gt 0 ]]; then
            python -m tests.runner $(cat changed_files.txt)
          else
            echo "No relevant tests to run."
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          if [[ "${{ env.all_tests }}" == "true" ]]; then
            npm test
          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then
            git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }} > changed_files.txt
            npm test -- --findRelatedTests $(cat changed_files.txt)
          else
            npm test
          fi
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Pre-configure Git
        run: |
          git config --global credential.helper store
          git config --global url."https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global --add safe.directory '*'
          
          # Create auth file
          echo "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com" > ~/.git-credentials
          chmod 600 ~/.git-credentials
          
          # Enable verbose Git output
          export GIT_TRACE=2
          export GIT_CURL_VERBOSE=2
          export GIT_TRACE_PACKET=2

      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false
          token: ${{ secrets.GH_TOKEN }}

      - name: Manual submodule checkout
        run: |
          echo "Initializing submodules..."
          git submodule update --init bountybench

      - name: Check System Architecture
        run: uname -m

      - name: Cleanup Unused Tools
        run: |
          echo "Removing unnecessary pre-installed tools..."
          df -h
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/lib/android/sdk
          sudo rm -rf /opt/ghc
          find /opt/hostedtoolcache/Python -mindepth 1 -maxdepth 1 ! -name "3.11.*" -exec sudo rm -rf {} \; || true
          df -h

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir ~/.cache/pip -r requirements.txt

      - name: Set up Git user information
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Set up QEMU
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Docker Cleanup before pulling new image
        run: |
          docker system prune -af
          docker image prune -af

      - name: Check Disk Space Before Docker Pull
        run: df -h

      - name: Pull Docker Container
        run: |
          docker pull --quiet cybench/bountyagent:latest
          docker manifest inspect cybench/bountyagent:latest

      - name: Display disk space after pulling image
        run: df -H

      - name: Create Docker Network
        run: docker network create shared_net || true

      - name: Run backend tests with coverage
        run: |
          coverage run --rcfile=.coveragerc -m pytest -s tests/

      - name: Generate Coverage Report
        run: coverage report

      - name: Generate HTML Coverage Report
        run: coverage html

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
import atexit
import shutil
import time
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional

from tenacity import retry, stop_after_attempt, wait_fixed

from agents.base_agent import AgentConfig, BaseAgent
from messages.action_messages.docker_action_message import DockerActionMessage
from messages.agent_messages.agent_message import AgentMessage
from messages.agent_messages.exploit_agent_message import ExploitAgentMessage
from resources.base_resource import ActionMessage
from resources.bounty_setup_resource import BountySetupResource
from resources.docker_resource import DockerResource
from resources.init_files_resource import InitFilesResource
from resources.kali_env_resource import KaliEnvResource
from resources.repo_setup_resource import RepoSetupResource
from utils.git_utils import (
    git_clean_untracked,
    git_commit_changes,
    git_has_changes,
    git_init_repo,
)
from utils.logger import get_main_logger

logger = get_main_logger(__name__)


@dataclass
class ExploitAgentConfig(AgentConfig):
    bounty_dir: Path
    task_dir: Path

    def to_dict(self):
        return {
            "bounty_dir": str(self.bounty_dir),
            "task_dir": str(self.task_dir),
        }

    @classmethod
    def from_dict(cls, data: dict):
        return cls(
            bounty_dir=Path(data["bounty_dir"]),
            task_dir=Path(data["task_dir"]),
        )


class ExploitAgent(BaseAgent):
    """
    ExploitAgent is responsible for managing and executing exploit scripts.

    This agent checks for the presence of an exploit.sh file, executes it,
    and verifies its success. It also handles the copying of exploit files,
    restarting of resources, and storing of exploit results.
    """

    REQUIRED_RESOURCES = [
        (InitFilesResource, "init_files"),
        KaliEnvResource,
        (DockerResource, "docker"),
    ]
    OPTIONAL_RESOURCES = [
        (BountySetupResource, "bounty_resource"),
        (RepoSetupResource, "repo_resource"),
    ]
    ACCESSIBLE_RESOURCES = [
        (RepoSetupResource, "repo_resource"),
        (BountySetupResource, "bounty_resource"),
        (InitFilesResource, "init_files"),
        KaliEnvResource,
        (DockerResource, "docker"),
    ]

    def __init__(self, agent_id: str, agent_config: ExploitAgentConfig):
        self.bounty_dir = agent_config.bounty_dir
        self.task_dir = agent_config.task_dir
        self.exploits_dir_name = "agent_exploits"
        self.exploits_dir = self.task_dir / self.bounty_dir / self.exploits_dir_name
        self.exploits_dir.mkdir(parents=True, exist_ok=True)
        self.tmp_exploits_dir = self.task_dir / "tmp"
        self.log_history = []

        git_init_repo(self.tmp_exploits_dir)

        super().__init__(agent_id, agent_config)

        atexit.register(self.cleanup)

    def _log(self, message: str, clear: bool = False) -> str:
        """Helper to append a message to log_history, log it, and return the combined log.
        Optionally clears the history after returning the combined log."""
        self.log_history.append(message)
        logger.info(message)
        combined = "\n".join(self.log_history)
        if clear:
            self.log_history.clear()
        return combined

    async def run(self, messages: List[AgentMessage]) -> AgentMessage:
        """Execute the main workflow of the ExploitAgent."""
        if len(messages) != 1:
            raise ValueError(
                f"Accepts only a single message, but received {len(messages)} messages"
            )

        prev_agent_message = messages[0]
        exploit_agent_message = ExploitAgentMessage(
            agent_id=self.agent_id, message=None, prev=prev_agent_message
        )

        exploit_script = self.tmp_exploits_dir / "exploit.sh"

        if not exploit_script.exists():
            combined_log = self._log(
                f"No exploit.sh found at {exploit_script}.", clear=True
            )
            exploit_agent_message.set_message(
                f"{combined_log}\nNo exploit script found."
            )

        if git_has_changes(self.tmp_exploits_dir):
            self._log(f"Found exploit script at: {exploit_script}")
            git_commit_changes(self.tmp_exploits_dir)
            await self.execute(exploit_agent_message, prev_agent_message)
            git_clean_untracked(self.tmp_exploits_dir)
            self.log_history.clear()
        else:
            combined_log = self._log(
                "No changes to exploit_files detected.", clear=True
            )
            exploit_agent_message.set_message(f"{combined_log}\nSkipping.")

        return exploit_agent_message

    async def execute(
        self,
        exploit_agent_message: ExploitAgentMessage,
        prev_agent_message: Optional[AgentMessage] = None,
    ) -> None:
        """Execute the exploit workflow."""
        try:
            self.restart_resources()
            logger.info("Executing exploit.sh")
            docker_output = await self.run_exploit()
            exploit_agent_message.add_child_message(docker_output)
            exit_code = docker_output.additional_metadata["exit_code"]
            exploit_output = docker_output.message
            self.log_history.append(
                f"Execution exploit.sh Output: {exploit_output}\nExit code: {exit_code}"
            )

            if exit_code == 0:
                copied_files_dir = self._store_exploit()
                if copied_files_dir:
                    logger.status(
                        f"Exploit executed successfully. Files copied to {copied_files_dir}.",
                        True,
                    )
                    combined_log = "\n".join(self.log_history)
                    git_clean_untracked(self.task_dir / "tmp" / "codebase")
                    exploit_agent_message.set_message(
                        f"{combined_log}\nExploit executed successfully."
                    )
                    exploit_agent_message.set_success_status(True)
                    exploit_agent_message.set_exploit_files_path(copied_files_dir)
                else:
                    error_msg = (
                        "Error copying over exploit files. Cannot proceed to patching."
                    )
                    logger.status(error_msg)
                    self.log_history.append(error_msg)
                    combined_log = "\n".join(self.log_history)
                    exploit_agent_message.set_message(
                        f"{combined_log}\nError copying exploit files."
                    )
            else:
                logger.status(
                    f"Exploit failed with exit code {exit_code}. Output: {exploit_output}"
                )
                self.log_history.append("Exploit failed.")
                exploit_agent_message.set_message("\n".join(self.log_history))

        except Exception as e:
            error_msg = f"Error during exploit execution: {str(e)}"
            logger.status(error_msg)
            self.log_history.append(error_msg)
            exploit_agent_message.set_message("\n".join(self.log_history))

    def restart_resources(self):
        """Restart necessary resources."""
        if hasattr(self, "bounty_resource"):
            self._restart_resource(self.bounty_resource)
        if hasattr(self, "repo_resource"):
            self._restart_resource(self.repo_resource)

    def _restart_resource(self, resource):
        """Restart a specific resource."""
        try:
            resource.restart()
            logger.info(f"{resource.resource_id} resource restarted successfully.")
        except Exception as e:
            logger.error(f"Failed to restart {resource.resource_id} resource: {e}")

    @retry(stop=stop_after_attempt(3), wait=wait_fixed(2))
    async def run_exploit(self) -> ActionMessage:
        """Run the exploit script in a Docker container."""
        volumes = {
            str(self.init_files.tmp_dir.resolve()): {"bind": "/app", "mode": "rw"},
        }

        exploit_command = "bash exploit.sh"

        exec_request = DockerActionMessage(
            resource_id=self.agent_id,
            message="Requesting exploit execution",
            docker_image="cybench/bountyagent:latest",
            command=exploit_command,
            network="shared_net",
            volumes=volumes,
        )

        exec_response = await self.docker.run(exec_request)

        return exec_response

    def _store_exploit(self) -> Optional[str]:
        """Store the exploit files in a timestamped directory."""
        try:
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            new_exploit_dir = (
                self.exploits_dir.parent / f"{self.exploits_dir.name}-{timestamp}"
            )

            if self.tmp_exploits_dir.exists() and self.tmp_exploits_dir.is_dir():
                if any(self.tmp_exploits_dir.iterdir()):
                    shutil.copytree(
                        self.tmp_exploits_dir,
                        new_exploit_dir,
                        ignore=shutil.ignore_patterns("codebase"),
                    )
                    logger.info(f"Exploits successfully moved to {new_exploit_dir}.")
                    return str(new_exploit_dir)
                else:
                    logger.warning("Exploits directory is empty. No files to move.")
            else:
                logger.warning("No exploits directory found to move.")
        except Exception as e:
            logger.error(f"Failed to move exploits directory: {e}")

        return None

    def cleanup(self):
        """Clean up temporary files and directories."""
        try:
            if self.exploits_dir.exists():
                shutil.rmtree(self.exploits_dir)
                logger.info(
                    f"Cleaned up temporary exploits directory: {self.exploits_dir}"
                )
        except Exception as e:
            logger.info(f"Error during final cleanup: {e}")

    def to_dict(self) -> dict:
        """Serializes the ExploitAgent state to a dictionary."""
        return {
            "bounty_dir": str(self.bounty_dir),
            "exploits_dir": str(self.exploits_dir),
            "tmp_exploits_dir": str(self.tmp_exploits_dir),
            "agent_id": self.agent_id,
            "timestamp": time.strftime("%Y-%m-%dT%H:%M:%S%z"),
        }

    @classmethod
    def from_dict(cls, data: dict, **kwargs) -> "ExploitAgent":
        """
        Creates an ExploitAgent instance from a serialized dictionary.
        """
        kwargs["bounty_dir"] = Path(data["bounty_dir"])
        agent = cls(**kwargs)
        agent.exploits_dir = Path(data["exploits_dir"])
        agent.tmp_exploits_dir = Path(data["tmp_exploits_dir"])
        agent.log_history = data["log_history"]
        agent._agent_id = data["agent_id"]
        return agent

    def save_to_file(self, filepath: Path) -> None:
        """
        Saves the agent state to a JSON file.
        """
        import json

        state = self.to_dict()
        filepath.write_text(json.dumps(state, indent=2))

    @classmethod
    def load_from_file(cls, filepath: Path, **kwargs) -> "ExploitAgent":
        """
        Loads an agent state from a JSON file.
        """
        import json

        data = json.loads(filepath.read_text())
        return cls.from_dict(data, **kwargs)

import unittest
import os
from unittest.mock import Mock, patch

from workflows.exploit_and_patch_workflow import run_exploit_phase, run_patch_phase, ExecutorAgent, ExploitAgent, PatchAgent
from agents.dataclasses.agent_spec import AgentConfig
from resources.kali_env_resource import KaliEnvResource
from resources.docker_resource import DockerResource
from resources.init_files_resource import InitFilesResource
from resources.setup_resource import SetupResource
from resources.utils import read_bounty_metadata, read_repo_metadata
from responses.command_response import CommandResponse

class TestExploitAndPatchWorkflow(unittest.TestCase):
    def setUp(self):
        self.repo = "lunary"
        self.task_repo_dir = os.path.abspath(f"bountybench/{self.repo}")
        self.bounty_number = "0"
        self.files_dir, self.tmp_dir = "codebase", "tmp"
        
        # Read metadata
        self.repo_metadata = read_repo_metadata(self.task_repo_dir)
        self.bounty_metadata = read_bounty_metadata(self.task_repo_dir, self.bounty_number)
        
        # Set up resources
        InitFilesResource(
            task_repo_dir=self.task_repo_dir,
            files_dir_name=self.files_dir,
            tmp_dir_name=self.tmp_dir,
            exploit_files_dir_name=None,
            vulnerable_commit=self.bounty_metadata['vulnerable_commit']
        )
        
        if os.path.exists(os.path.join(self.task_repo_dir, "setup_repo_env.sh")):
            SetupResource(task_level_setup=False, task_repo_dir=self.task_repo_dir, files_dir=self.files_dir)
        if self.repo_metadata["target_host"]:
            SetupResource(
                task_level_setup=True,
                task_repo_dir=self.task_repo_dir,
                files_dir=self.files_dir,
                bounty_number=self.bounty_number,
                server_address=self.repo_metadata["target_host"]
            )
        
        DockerResource("DockerHelper")
        
        # Initialize KaliEnvResource
        self.kali_env = KaliEnvResource(
            "KaliEnv",
            task_repo_dir=self.task_repo_dir,
            bounty_number=self.bounty_number,
            volumes={
                os.path.join(self.task_repo_dir, self.tmp_dir): {"bind": "/app", "mode": "rw"},
                "/tmp": {"bind": "/tmp", "mode": "rw"}
            }
        )
        
        # Set up paths
        self.exploit_files_src = os.path.join(self.task_repo_dir, "bounties", f"bounty_{self.bounty_number}", "exploit_files")
        self.patch_files_src = os.path.join(self.task_repo_dir, "bounties", f"bounty_{self.bounty_number}", "patch_files")
        self.tmp_exploit_files = "/app/exploit_files"
        
        # Initialize agents
        self.executor_agent = Mock(spec=ExecutorAgent)
        self.exploit_agent = ExploitAgent(bounty_dir=os.path.join(self.task_repo_dir, "bounties", f"bounty_{self.bounty_number}"))
        self.patch_agent = PatchAgent(bounty_dir=os.path.join("bounties", f"bounty_{self.bounty_number}"), exploit_files_dir=None, use_verify_script=False)

    def create_file_in_kali(self, directory, filename, content):
        self.kali_env.run_command(f"mkdir -p {directory}")
        dest_file = f"{directory}/{filename}"
        create_file_cmd = f"cat << 'EOF' > {dest_file}\n{content}\nEOF"
        self.kali_env.run_command(create_file_cmd)
        self.kali_env.run_command(f"chmod 755 {dest_file}")

    def copy_files_to_kali(self, src_dir, dest_dir):
        self.kali_env.run_command(f"mkdir -p {dest_dir}")
        for filename in os.listdir(src_dir):
            src_file = os.path.join(src_dir, filename)
            with open(src_file, 'r') as f:
                content = f.read()
            self.create_file_in_kali(dest_dir, filename, content)

    def copy_exploit_files_to_kali(self):
        self.copy_files_to_kali(self.exploit_files_src, self.tmp_exploit_files)

    def copy_patch_files_to_kali(self):
        self.copy_files_to_kali(self.patch_files_src, self.tmp_dir)
        
        # Apply patches to the correct locations
        for src, dest in self.bounty_metadata["patch"].items():
            src_file = f"{self.tmp_dir}/{os.path.basename(src)}"
            dest_file = f"/app/{dest}"
            self.kali_env.run_command(f"cp {src_file} {dest_file}")

    @patch('exploit_and_patch_workflow.ExecutorAgent')
    def test_exploit_and_patch_workflow(self, MockExecutorAgent):
        MockExecutorAgent.return_value = self.executor_agent

        # Exploit phase
        # Step 1: No exploit.sh
        self.executor_agent.run.return_value = CommandResponse("No exploit.sh found")
        result = run_exploit_phase(self.executor_agent, self.exploit_agent, 3)
        self.assertIsNone(result)

        # Step 2: Incorrect exploit.sh
        self.create_file_in_kali(self.tmp_exploit_files, "exploit.sh", "echo 'Incorrect exploit'")
        self.executor_agent.run.return_value = CommandResponse("Incorrect exploit.sh found")
        result = run_exploit_phase(self.executor_agent, self.exploit_agent, 3)
        self.assertIsNone(result)

        # Step 3: Correct exploit.sh
        self.copy_exploit_files_to_kali()
        self.executor_agent.run.return_value = CommandResponse("Correct exploit.sh found")
        result = run_exploit_phase(self.executor_agent, self.exploit_agent, 3)
        self.assertIsNotNone(result)

        # Patch phase
        # Step 1: No patch
        self.executor_agent.run.return_value = CommandResponse("No patch found")
        result = run_patch_phase(self.executor_agent, self.patch_agent, 3, "Initial response")
        self.assertFalse(result)

        # Step 2: Incorrect patch (dummy file)
        self.create_file_in_kali(self.tmp_dir, "incorrect_patch.py", "print('Incorrect patch')")
        self.executor_agent.run.return_value = CommandResponse("Incorrect patch found")
        result = run_patch_phase(self.executor_agent, self.patch_agent, 3, "Initial response")
        self.assertFalse(result)

        # Step 3: Correct patch
        self.copy_patch_files_to_kali()
        self.executor_agent.run.return_value = CommandResponse("Correct patch found")
        result = run_patch_phase(self.executor_agent, self.patch_agent, 3, "Initial response")
        self.assertTrue(result)

    def tearDown(self):
        # Clean up: remove the temporary files from the Kali container
        self.kali_env.run_command(f"rm -rf {self.tmp_exploit_files}")
        self.kali_env.run_command(f"rm -rf {self.tmp_dir}")

if __name__ == '__main__':
    unittest.main()
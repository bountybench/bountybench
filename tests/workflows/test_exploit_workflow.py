import json
import os
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from prompts.prompts import EXPLOIT_PROMPT, TARGET_HOST_EXPLOIT_PROMPT
from workflows.exploit_workflow import ExploitWorkflow


@pytest.fixture
def mock_repo_metadata():
    return {"target_host": "test_host", "info": "repo_info"}


@pytest.fixture
def mock_bounty_metadata_with_task():
    return {
        "task": "Custom task description from metadata",
        "info": "bounty_info",
        "verify_exploit_prompt": "Test verification",
    }


@pytest.fixture
def mock_bounty_metadata_without_task():
    return {
        "info": "bounty_info",
        "verify_exploit_prompt": "Test verification",
    }


@pytest.fixture
def mock_task_dir(tmp_path):
    # Create task directory
    task_dir = tmp_path / "task_dir"
    task_dir.mkdir()

    # Create bounties directory
    bounties_dir = task_dir / "bounties"
    bounties_dir.mkdir()

    # Create bounty_0 directory
    bounty_dir = bounties_dir / "bounty_0"
    bounty_dir.mkdir()

    # Create writeup directory
    writeup_dir = bounty_dir / "writeup"
    writeup_dir.mkdir()

    # Create writeup.html
    writeup_file = writeup_dir / "writeup.html"
    writeup_file.write_text("<html>Test writeup</html>")

    return task_dir


def test_exploit_workflow_with_custom_task(
    mock_task_dir, mock_repo_metadata, mock_bounty_metadata_with_task
):
    # Write metadata files
    repo_metadata_file = mock_task_dir / "metadata.json"
    with open(repo_metadata_file, "w") as f:
        json.dump(mock_repo_metadata, f)

    bounty_metadata_file = (
        mock_task_dir / "bounties" / "bounty_0" / "bounty_metadata.json"
    )
    with open(bounty_metadata_file, "w") as f:
        json.dump(mock_bounty_metadata_with_task, f)

    # Create workflow with mocks
    with patch("workflows.exploit_workflow.ExploitPhase") as mock_exploit_phase:
        workflow = ExploitWorkflow(
            task_dir=mock_task_dir,  # Pass Path object instead of string
            bounty_number="0",
            phase_iterations=1,
            use_mock_model=True,
        )

        # Test if task was passed correctly to phase_kwargs
        _, kwargs = mock_exploit_phase.call_args

        # Check that task is correctly set from bounty metadata
        assert kwargs["task"] == "Custom task description from metadata"

        # Verify that the correct prompt template is used (EXPLOIT_PROMPT or TARGET_HOST_EXPLOIT_PROMPT)
        initial_prompt = kwargs["initial_prompt"]
        # Look for {task} in the prompt since we're using the template with task placeholders
        assert "{task}" in initial_prompt
        # Should NOT contain verify scripts language
        assert "view the provided verify scripts" not in initial_prompt.lower()

        # Need to add missing required format parameters
        format_params = kwargs.copy()
        format_params.update(
            {
                "codebase": "mock codebase content",
                "verify_check_information": "",
            }
        )

        # Check the actual formatted prompt would contain the task
        formatted_prompt = initial_prompt.format(**format_params)
        assert "Custom task description from metadata" in formatted_prompt

import unittest
import os
from resources.docker_resource import DockerResource
from resources.init_files_resource import InitFilesResource
from resources.setup_resource import SetupResource
from resources.kali_env_resource import KaliEnvResource
from resources.utils import read_bounty_metadata
from responses.command_response import CommandResponse
from responses.answer_response import AnswerResponse
from responses.base_response import BaseResponse

from agents.patch_agent.patch_agent import PatchAgent


class TestPatchAgent(unittest.TestCase):
    def setUp(self):
        repo = "lunary"
        # Set up the test environment - using lunary as an environment
        self.test_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        self.exploit_files_src = os.path.join(self.test_dir, "bountybench", repo, "bounties", "bounty_0", "exploit_files")
        
        print("Set self properties")
        task_repo_dir = f"bountybench/{repo}"
        bounty_number = "0"
        files_dir, tmp_dir = "codebase", "tmp"


        bounty_metadata = read_bounty_metadata(str(task_repo_dir), bounty_number)


        vulnerable_commit=bounty_metadata['vulnerable_commit']


        print(f"task_repo_dir: {task_repo_dir}")
        print(f"files_dir_name: {files_dir}")
        print(f"tmp_dir_name: {tmp_dir}")

        # Read metadata
        InitFilesResource(task_repo_dir=task_repo_dir, files_dir_name=files_dir, tmp_dir_name=tmp_dir, vulnerable_commit=vulnerable_commit)
        
        self.task_repo_dir = os.path.abspath(task_repo_dir)
        self.tmp_dir = os.path.join(self.task_repo_dir, tmp_dir)
        self.tmp_exploit_files = "/app/exploit_files"  # Path in the Kali container

        SetupResource(task_level_setup=False, task_repo_dir=task_repo_dir, files_dir=files_dir)
        DockerResource("DockerHelper")
        
        # Initialize KaliEnvResource
        self.kali_env = KaliEnvResource("KaliEnv", task_repo_dir=task_repo_dir, bounty_number=bounty_number, volumes={
            os.path.join(self.task_repo_dir, tmp_dir): {"bind": "/app", "mode": "rw"}
        })
        
        # Initialize the PatchAgent
        self.agent = PatchAgent(bounty_dir=os.path.join(self.task_repo_dir, "bounties", "bounty_0"))

    def test_run_exploit_access(self):
        # Step 1: Copy exploit files to the environment
        self.copy_exploit_files_to_kali()

        # Verify the exploit files are accessible
        stdout, stderr = self.kali_env.run_command(f"ls -l {self.tmp_exploit_files}")
        if stderr:
            self.fail(f"Failed to list files in {self.tmp_exploit_files}: {stderr}")

        # Check that all expected files are present
        for file in os.listdir(self.exploit_files_src):
            self.assertIn(file, stdout)

        # Step 2: Run the exploit script
        exploit_stdout, exploit_stderr = self.kali_env.run_command(
            f"cd {self.tmp_exploit_files} && ./exploit.sh"
        )

        print("Exploit script output:")
        print(exploit_stdout)

        # Assert that the exploit script ran successfully
        self.assertIn("Running on", exploit_stdout)
        self.assertIn("Getting projects from User B", exploit_stdout)

    def copy_exploit_files_to_kali(self):
        # Ensure the destination directory exists in the Kali container
        self.kali_env.run_command(f"mkdir -p {self.tmp_exploit_files}")

        # Copy each file from the source directory to the Kali container
        for filename in os.listdir(self.exploit_files_src):
            src_file = os.path.join(self.exploit_files_src, filename)
            dest_file = f"{self.tmp_exploit_files}/{filename}"

            with open(src_file, "r") as f:
                content = f.read()

            create_file_cmd = f"cat << 'EOF' > {dest_file}\n{content}\nEOF"
            stdout, stderr = self.kali_env.run_command(create_file_cmd)
            if stderr:
                self.fail(f"Failed to create {filename}: {stderr}")

            # Set executable permissions
            self.kali_env.run_command(f"chmod 755 {dest_file}")

    def tearDown(self):
        # Clean up: remove the temporary exploit files from the Kali container
        self.kali_env.run_command(f"rm -rf {self.tmp_exploit_files}")

if __name__ == '__main__':
    unittest.main()
import unittest
import os
import shutil
from resources.docker_resource import DockerResource
from resources.init_files_resource import InitFilesResource
from resources.setup_resource import SetupResource
from resources.utils import docker_network_exists, read_bounty_metadata, read_repo_metadata
from responses.command_response import CommandResponse
from responses.answer_response import AnswerResponse
from responses.base_response import BaseResponse

from agents.exploit_agent.exploit_agent import ExploitAgent

class TestExploitAgent(unittest.TestCase):
    def setUp(self):
        # Set up the test environment - using setuptools as an environment
        self.test_dir = os.path.dirname(os.path.abspath(__file__))
        self.task_repo_dir = os.path.join(self.test_dir, "test_task_repo")
        self.tmp_dir = os.path.join(self.task_repo_dir, "tmp")
        self.exploit_files_src = os.path.join(self.test_dir, "setuptools", "bounties", "bounty_0", "exploit_files")
        self.tmp_exploit_files = os.path.join(self.tmp_dir, "exploit_files")
        print("Set self properties")
        # Create necessary directories
        os.makedirs(self.task_repo_dir, exist_ok=True)
        os.makedirs(self.tmp_dir, exist_ok=True)
        print("Made necessary dirs")
        task_repo_dir = "cybounty/setuptools"
        bounty_number = "0"
        files_dir, tmp_dir = "codebase", "tmp"

        network_name = "shared_net"

        # Check if the network exists
        if not docker_network_exists(network_name):
            print("Hmm, we'll need a shared net")
            exit(0)
            # logger.info(f"Creating Docker network: {network_name}")
            # run_command(["docker", "network", "create", network_name])

        # Read metadata
        repo_metadata = read_repo_metadata(str(task_repo_dir))
        bounty_metadata = read_bounty_metadata(str(task_repo_dir), bounty_number)
        print("read metadata")
        InitFilesResource(task_repo_dir=task_repo_dir, files_dir_name=files_dir, tmp_dir_name=tmp_dir, exploit_files_dir_name=None, vulnerable_commit=bounty_metadata['vulnerable_commit'])
        if os.path.exists(str(task_repo_dir) + "/setup_repo_env.sh"): 
            SetupResource(task_level_setup=False, task_repo_dir=task_repo_dir, files_dir=files_dir)
        if repo_metadata["target_host"]: 
            SetupResource(task_level_setup=True, task_repo_dir=task_repo_dir, files_dir=files_dir, bounty_number=bounty_number, server_address=repo_metadata["target_host"])

        DockerResource("DockerHelper")
        print("setup resources")
        # Initialize the ExploitAgent
        self.agent = ExploitAgent(bounty_dir=os.path.join(self.task_repo_dir, "bounties", "bounty_0"))
        print("setup agent")

    def tearDown(self):
        # Clean up the test environment
        shutil.rmtree(self.task_repo_dir)

    def test_exploit_workflow(self):
        # Step 1: Initial run with no exploit files
        initial_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(initial_response, BaseResponse)
        self.assertIn("No exploit.sh found", initial_response.response)

        # Step 2: Copy exploit files to tmp directory
        shutil.copytree(self.exploit_files_src, self.tmp_exploit_files)

        # Step 3: Run with exploit files present
        exploit_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(exploit_response, AnswerResponse)
        self.assertIn("Exploit succeeded", exploit_response.response)

if __name__ == '__main__':
    unittest.main()
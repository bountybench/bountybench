import unittest
import os
import shutil
from resources.docker_resource import DockerResource
from resources.init_files_resource import InitFilesResource
from resources.setup_resource import SetupResource
from resources.utils import read_bounty_metadata, read_repo_metadata
from responses.command_response import CommandResponse
from responses.answer_response import AnswerResponse
from responses.base_response import BaseResponse

from agents.exploit_agent.exploit_agent import ExploitAgent

class TestExploitAgent(unittest.TestCase):
    def setUp(self):
        # Set up the test environment - using lunary as an environment
        self.test_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        self.exploit_files_src = os.path.join(self.test_dir, "cybounty", "lunary", "bounties", "bounty_0", "exploit_files")
        
        print("Set self properties")
        task_repo_dir = "cybounty/lunary"
        bounty_number = "0"
        files_dir, tmp_dir = "codebase", "tmp"

        # Read metadata
        repo_metadata = read_repo_metadata(str(task_repo_dir))
        bounty_metadata = read_bounty_metadata(str(task_repo_dir), bounty_number)

        InitFilesResource(task_repo_dir=task_repo_dir, files_dir_name=files_dir, tmp_dir_name=tmp_dir, exploit_files_dir_name=None, vulnerable_commit=bounty_metadata['vulnerable_commit'])
        
        self.task_repo_dir = os.path.abspath(task_repo_dir)
        self.tmp_dir = os.path.join(self.task_repo_dir, tmp_dir)
        self.tmp_exploit_files = os.path.join(self.tmp_dir, "exploit_files")

        if os.path.exists(str(task_repo_dir) + "/setup_repo_env.sh"): 
            SetupResource(task_level_setup=False, task_repo_dir=task_repo_dir, files_dir=files_dir)
        if repo_metadata["target_host"]: 
            SetupResource(task_level_setup=True, task_repo_dir=task_repo_dir, files_dir=files_dir, bounty_number=bounty_number, server_address=repo_metadata["target_host"])

        DockerResource("DockerHelper")
        
        # Initialize the ExploitAgent
        self.agent = ExploitAgent(bounty_dir=os.path.join(self.task_repo_dir, "bounties", "bounty_0"))

    def test_exploit_workflow(self):
        # Step 1: Initial run with no exploit files
        initial_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(initial_response, BaseResponse)
        self.assertIn("No exploit.sh found", initial_response.response)

        # Step 2: Create a failing exploit.sh
        os.makedirs(self.tmp_exploit_files, exist_ok=True)
        with open(os.path.join(self.tmp_exploit_files, "exploit.sh"), "w") as f:
            f.write("#!/bin/bash\necho 'This exploit fails'\nexit 1")
        os.chmod(os.path.join(self.tmp_exploit_files, "exploit.sh"), 0o755)

        # Run with failing exploit.sh
        failing_exploit_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(failing_exploit_response, BaseResponse)
        self.assertIn("Exploit failed", failing_exploit_response.response)

        # Step 3: Replace with working exploit files
        shutil.rmtree(self.tmp_exploit_files)
        shutil.copytree(self.exploit_files_src, self.tmp_exploit_files)

        # Step 4: Run with working exploit files present
        exploit_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(exploit_response, AnswerResponse)
        self.assertIn("Exploit executed successfully", exploit_response.response)
        self.assertIn("Ready for patching", exploit_response.response)
        
if __name__ == '__main__':
    unittest.main()
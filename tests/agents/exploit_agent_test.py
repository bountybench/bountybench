import unittest
import os
import shutil
from resources.docker_resource import DockerResource
from resources.init_files_resource import InitFilesResource
from resources.setup_resource import SetupResource
from resources.kali_env_resource import KaliEnvResource
from resources.utils import read_bounty_metadata, read_repo_metadata
from responses.command_response import CommandResponse
from responses.answer_response import AnswerResponse
from responses.base_response import BaseResponse

from agents.exploit_agent.exploit_agent import ExploitAgent

class TestExploitAgent(unittest.TestCase):
    def setUp(self):
        repo = "lunary"
        # Set up the test environment - using lunary as an environment
        self.test_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        self.exploit_files_src = os.path.join(self.test_dir, "bountybench", repo, "bounties", "bounty_0", "exploit_files")
        
        print("Set self properties")
        task_repo_dir = f"bountybench/{repo}"
        bounty_number = "0"
        files_dir, tmp_dir = "codebase", "tmp"

        # Read metadata
        repo_metadata = read_repo_metadata(str(task_repo_dir))
        bounty_metadata = read_bounty_metadata(str(task_repo_dir), bounty_number)

        InitFilesResource(task_repo_dir=task_repo_dir, files_dir_name=files_dir, tmp_dir_name=tmp_dir, exploit_files_dir_name=None, vulnerable_commit=bounty_metadata['vulnerable_commit'])
        
        self.task_repo_dir = os.path.abspath(task_repo_dir)
        self.tmp_dir = os.path.join(self.task_repo_dir, tmp_dir)
        self.tmp_exploit_files = "/app/exploit_files"  # Path in the Kali container

        if os.path.exists(str(task_repo_dir) + "/setup_repo_env.sh"): 
            SetupResource(task_level_setup=False, task_repo_dir=task_repo_dir, files_dir=files_dir)
        if repo_metadata["target_host"]: 
            SetupResource(task_level_setup=True, task_repo_dir=task_repo_dir, files_dir=files_dir, bounty_number=bounty_number, server_address=repo_metadata["target_host"])

        DockerResource("DockerHelper")
        
        # Initialize KaliEnvResource
        self.kali_env = KaliEnvResource("KaliEnv", task_repo_dir=task_repo_dir, bounty_number=bounty_number, volumes={
            os.path.join(self.task_repo_dir, tmp_dir): {"bind": "/app", "mode": "rw"}
        })
        
        # Initialize the ExploitAgent
        self.agent = ExploitAgent(bounty_dir=os.path.join(self.task_repo_dir, "bounties", "bounty_0"))

    def test_exploit_workflow(self):
        # Step 1: Initial run with no exploit files
        initial_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(initial_response, BaseResponse)
        self.assertIn("No exploit.sh found", initial_response.response)

        # Step 2: Create a failing exploit.sh in the Kali container
        self.kali_env.run_command(f"mkdir -p {self.tmp_exploit_files}")
        self.kali_env.run_command(f"echo '#!/bin/bash\necho \"This exploit fails\"\nexit 1' > {self.tmp_exploit_files}/exploit.sh")
        self.kali_env.run_command(f"chmod 755 {self.tmp_exploit_files}/exploit.sh")

        # Run with failing exploit.sh
        failing_exploit_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(failing_exploit_response, BaseResponse)
        self.assertIn("Exploit failed", failing_exploit_response.response)

        # Step 3: Replace with working exploit files
        self.kali_env.run_command(f"rm -rf {self.tmp_exploit_files}")
        for root, dirs, files in os.walk(self.exploit_files_src):
            for file in files:
                src_path = os.path.join(root, file)
                dest_path = os.path.join(self.tmp_exploit_files, file)
                with open(src_path, 'r') as src_file:
                    content = src_file.read()
                    self.kali_env.run_command(f"echo '{content}' > {dest_path}")
                self.kali_env.run_command(f"chmod 755 {dest_path}")

        # Step 4: Run with working exploit files present
        exploit_response = self.agent.run([CommandResponse("Command: ls")])
        self.assertIsInstance(exploit_response, AnswerResponse)
        self.assertIn("Exploit executed successfully", exploit_response.response)
        self.assertIn("Ready for patching", exploit_response.response)
        
    def tearDown(self):
        # Clean up: remove the temporary exploit files from the Kali container
        self.kali_env.run_command(f"rm -rf {self.tmp_exploit_files}")

if __name__ == '__main__':
    unittest.main()
import unittest
import os
import shutil
from resources.docker_resource import DockerResource
from resources.init_files_resource import InitFilesResource
from resources.setup_resource import SetupResource
from resources.kali_env_resource import KaliEnvResource
from resources.utils import read_bounty_metadata, read_repo_metadata
from messages.command_message import CommandMessage
from messages.answer_message import AnswerMessage
from messages.message import Message

from agents.exploit_agent.exploit_agent import ExploitAgent

class TestExploitAgent(unittest.TestCase):
    def setUp(self):
        repo = "lunary"
        # Set up the test environment - using lunary as an environment
        self.test_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        self.exploit_files_src = os.path.join(self.test_dir, "bountybench", repo, "bounties", "bounty_0", "exploit_files")
        
        print("Set self properties")
        task_repo_dir = f"bountybench/{repo}"
        bounty_number = "0"
        files_dir, tmp_dir = "codebase", "tmp"

        # Read metadata
        repo_metadata = read_repo_metadata(str(task_repo_dir))
        bounty_metadata = read_bounty_metadata(str(task_repo_dir), bounty_number)

        InitFilesResource(task_repo_dir=task_repo_dir, files_dir_name=files_dir, tmp_dir_name=tmp_dir, exploit_files_dir_name=None, vulnerable_commit=bounty_metadata['vulnerable_commit'])
        
        self.task_repo_dir = os.path.abspath(task_repo_dir)
        self.tmp_dir = os.path.join(self.task_repo_dir, tmp_dir)
        self.tmp_exploit_files = "/app/exploit_files"  # Path in the Kali container

        if os.path.exists(str(task_repo_dir) + "/setup_repo_env.sh"): 
            SetupResource(task_level_setup=False, task_repo_dir=task_repo_dir, files_dir=files_dir)
        if repo_metadata["target_host"]: 
            SetupResource(task_level_setup=True, task_repo_dir=task_repo_dir, files_dir=files_dir, bounty_number=bounty_number, server_address=repo_metadata["target_host"])

        DockerResource("DockerHelper")
        
        # Initialize KaliEnvResource
        self.kali_env = KaliEnvResource("KaliEnv", task_repo_dir=task_repo_dir, bounty_number=bounty_number, volumes={
            os.path.join(self.task_repo_dir, tmp_dir): {"bind": "/app", "mode": "rw"}
        })
        
        # Initialize the ExploitAgent
        self.agent = ExploitAgent(bounty_dir=os.path.join(self.task_repo_dir, "bounties", "bounty_0"))
    
    def test_exploit_workflow(self):
        # Step 1: Initial run with no exploit files
        initial_message = self.agent.run([CommandMessage("Command: ls")])
        self.assertIsInstance(initial_message, Message)
        self.assertIn("No exploit.sh found", initial_message.message)

        # Step 2: Copy all exploit files to the Kali container
        self.copy_exploit_files_to_kali()

        # Verify the files were copied
        stdout, stderr = self.kali_env.run_command(f"ls -l {self.tmp_exploit_files}")
        if stderr:
            self.fail(f"Failed to list files: {stderr}")
        for file in os.listdir(self.exploit_files_src):
            self.assertIn(file, stdout)

        # Step 3: Run with exploit files present
        exploit_message = self.agent.run([CommandMessage("Command: ls")])
        
        # Check if the exploit was successful or not
        if isinstance(exploit_message, AnswerMessage):
            self.assertIn("Exploit executed successfully", exploit_message.message)
            self.assertIn("Ready for patching", exploit_message.message)
        else:
            self.assertIsInstance(exploit_message, Message)
            self.assertIn("Exploit failed", exploit_message.message)
            
            # Print the exploit output for debugging
            print("Exploit output:")
            print(exploit_message.message)
            
            self.fail("Exploit execution failed. See output above for details.")
    
    def copy_exploit_files_to_kali(self):
        # Ensure the destination directory exists in the Kali container
        self.kali_env.run_command(f"mkdir -p {self.tmp_exploit_files}")

        # Copy each file from the source directory to the Kali container
        for filename in os.listdir(self.exploit_files_src):
            src_file = os.path.join(self.exploit_files_src, filename)
            dest_file = f"{self.tmp_exploit_files}/{filename}"
            
            with open(src_file, 'r') as f:
                content = f.read()
            
            create_file_cmd = f"cat << 'EOF' > {dest_file}\n{content}\nEOF"
            stdout, stderr = self.kali_env.run_command(create_file_cmd)
            if stderr:
                self.fail(f"Failed to create {filename}: {stderr}")
            
            # Set permissions
            self.kali_env.run_command(f"chmod 755 {dest_file}")

    def tearDown(self):
        # Clean up: remove the temporary exploit files from the Kali container
        self.kali_env.run_command(f"rm -rf {self.tmp_exploit_files}")

if __name__ == '__main__':
    unittest.main()
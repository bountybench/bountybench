from pathlib import Path
import pytest
from unittest.mock import patch
import subprocess

from agents.agent_manager import AgentManager
from agents.exploit_agent.exploit_agent import ExploitAgentConfig, ExploitAgent
from messages.agent_messages.exploit_agent_message import ExploitAgentMessage
from tests.agents.agent_test_utils import lunary_bounty_0_setup as bounty_setup, EnvPath, write_to_file_and_make_executable

def mock_exploit_agent_message():
    def mock_init(self, agent_id, message, prev, success=None, patch_files_dir=None):
        self._message = message

    return patch.object(ExploitAgentMessage, '__init__', mock_init)

def mock_store_patch():
    def mock_s_patch(self):
        return
    return patch.object(ExploitAgent, "store_patch", mock_s_patch)

def mock_restart_resource():
    return patch.object(ExploitAgent, "_restart_resource")

@pytest.fixture(scope="module")
def exploit_agent(bounty_setup):
    env_path: EnvPath = bounty_setup
    # Initialize agent
    agent_manager = AgentManager()
    exploit_config = ExploitAgentConfig(
        bounty_dir=env_path.BOUNTY_DIR_FROM_TASK_DIR,
        task_dir=env_path.TASK_DIR,
    )
    agent = agent_manager.create_agent("test_exploit_agent", agent_manager, exploit_config)

    # agent's codebase parameter is initialized in the run function so we do it here
    agent.codebase = env_path.TMP_DIR

    mocks = [mock_restart_resource(), mock_exploit_agent_message()]
    [mock.start() for mock in mocks]

    store_patch_mock = mock_store_patch()
    store_patch_mock.start() # we don't want this to stop during testing so we don't stop

    yield agent

    [mock.stop() for mock in mocks]

    # revert any commits the tests made in env
    subprocess.run(
        ["git", "reset", "--hard", "origin/main"],
        cwd=env_path.TASK_DIR
    )


def test_init_git_repo(bounty_setup, exploit_agent):
    import pdb
    pdb.set_trace()
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent
    pass

def test_has_changes(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent
    pass

def test_commit_changes(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent
    pass

def test_clean_untracked(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent
    pass

def test_run_exploit(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    agent = exploit_agent
    exploit_script_dir = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir,
        exit_code=1,
    )
    exploit_result = agent.run_exploit()
    assert exploit_result[1] == 1

    write_to_file_and_make_executable(
        script_path=exploit_script_dir,
        exit_code=0,
    )
    exploit_result = agent.run_exploit()
    assert exploit_result[1] == 0

    write_to_file_and_make_executable(
        script_path=exploit_script_dir,
        exit_code=2,
    )
    exploit_result = agent.run_exploit()
    assert exploit_result[1] == 2

def test_store_exploit(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    agent = exploit_agent
    pass

def test_cleanup(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    agent = exploit_agent
    pass

def test_to_dict(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    agent = exploit_agent
    pass

def test_from_dict(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    agent = exploit_agent
    pass

def test_save_to_file(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    agent = exploit_agent
    pass

def test_load_from_file(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    agent = exploit_agent
    pass

@pytest.fixture(scope="module")
def execute_fixture(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=0,
    )
    yield

def test_execute_exit_code_0_copy_fail(bounty_setup, exploit_agent, execute_fixture):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=0,
    )

    with patch.object(ExploitAgent, "_store_exploit", return_value=None):
        result = exploit_agent.execute()

    assert isinstance(result, ExploitAgentMessage)
    assert "Error copying" in result.message.lower()

def test_execute_exit_code_0_copy_success(bounty_setup, exploit_agent, execute_fixture):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=0,
    )
    result = exploit_agent.execute()
    assert isinstance(result, ExploitAgentMessage)
    assert "Exploit executed successfully" in result.message.lower()

def test_execute_exit_code_1(bounty_setup, exploit_agent, execute_fixture):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=1,
    )
    result = exploit_agent.execute()
    assert isinstance(result, ExploitAgentMessage)
    assert "Exploit failed with exit code 1" in result.message.lower()

def test_execute_exit_code_2(bounty_setup, exploit_agent, execute_fixture):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=2,
    )
    result = exploit_agent.execute()
    assert isinstance(result, ExploitAgentMessage)
    assert "Exploit failed with exit code 2" in result.message.lower()

def test_execute_restart_resources_failed():
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    def mock_restart_resources(self):
        raise Exception
    with patch.object(ExploitAgent, "_restart_resources", mock_restart_resources):
        result = exploit_agent.execute()
    assert isinstance(result, ExploitAgentMessage)
    assert "Error during exploit execution" in result.message.lower()


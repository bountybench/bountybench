import shutil
import subprocess
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest

from agents.agent_manager import AgentManager
from agents.exploit_agent.exploit_agent import ExploitAgent, ExploitAgentConfig
from messages.action_messages.action_message import ActionMessage
from messages.agent_messages.exploit_agent_message import ExploitAgentMessage
from tests.test_utils.bounty_setup_test_util import EnvPath
from tests.test_utils.bounty_setup_test_util import (
    lunary_bounty_0_setup as bounty_setup,
)
from tests.test_utils.bounty_setup_test_util import write_to_file_and_make_executable


def mock_exploit_agent_message():
    def mock_init(self, agent_id, message, prev, success=None, exploit_files_dir=None):
        self._message = message

    return patch.object(ExploitAgentMessage, "__init__", mock_init)


def mock_restart_resource():
    return patch.object(ExploitAgent, "_restart_resource")


@pytest.fixture(scope="module")
def exploit_agent(bounty_setup):
    env_path: EnvPath = bounty_setup
    # Initialize agent

    env_path.TMP_DIR.mkdir(parents=True, exist_ok=True)

    agent_manager = AgentManager(workflow_id="1")
    exploit_config = ExploitAgentConfig(
        bounty_dir=env_path.BOUNTY_DIR,
        task_dir=env_path.TASK_DIR,
        tmp_dir=env_path.TMP_DIR,
    )
    agent = agent_manager.create_agent(
        "test_exploit_agent", ExploitAgent, exploit_config
    )

    # Only mock restart_resource - no need to mock ExploitAgentMessage
    mock = mock_restart_resource()
    mock.start()

    yield agent

    mock.stop()

    # revert any commits the tests made in env
    subprocess.run(["git", "reset", "--hard", "origin/main"], cwd=env_path.TASK_DIR)


@pytest.fixture(scope="module")
def execute_fixture(bounty_setup, exploit_agent):
    """
    Should be run if using execute function.
    """
    env_path: EnvPath = bounty_setup

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=0,
    )
    yield


@pytest.fixture(scope="function")
def git_exploit_agent():
    fake_tmp_dir = Path("/tmp/test_exploit_agent_git")
    fake_tmp_dir.mkdir(parents=True, exist_ok=True)

    with patch.object(ExploitAgent, "__init__", lambda x: None):
        mock_exploit_agent = ExploitAgent()
        mock_exploit_agent.tmp_exploits_dir = fake_tmp_dir
        yield mock_exploit_agent, fake_tmp_dir

    shutil.rmtree(fake_tmp_dir)


@pytest.fixture(scope="function")
def store_exploit_agent():
    fake_tmp_dir = Path("/tmp/test_exploit_agent_tmp_exploits_dir")
    exploits_dir = Path("/tmp/test_exploit_agent_exploits_dir")

    fake_tmp_dir.mkdir(parents=True, exist_ok=True)
    (fake_tmp_dir / "codebase").mkdir(parents=True, exist_ok=True)
    (fake_tmp_dir / "mysterious_exploit").mkdir(parents=True, exist_ok=True)
    subprocess.run(["touch", str(fake_tmp_dir / "hi.txt")])

    mock_time = patch("time.strftime", return_value="0")

    mock_time.start()
    with patch.object(ExploitAgent, "__init__", lambda x: None):
        mock_exploit_agent = ExploitAgent()
        # Fix variable names to match the actual code
        mock_exploit_agent.tmp_dir = fake_tmp_dir
        mock_exploit_agent.output_exploits_dir = exploits_dir
        # Set the exploit_id used in _store_exploit
        mock_exploit_agent.exploit_id = 1
        store_exploits_dir = Path(f"{exploits_dir}/exploit_1")
        yield mock_exploit_agent, fake_tmp_dir, store_exploits_dir, exploits_dir

    mock_time.stop()
    if fake_tmp_dir.exists():
        shutil.rmtree(fake_tmp_dir)
    if exploits_dir.exists():
        shutil.rmtree(exploits_dir)
    if store_exploits_dir.exists():
        shutil.rmtree(store_exploits_dir)


@pytest.mark.asyncio
async def test_execute_exit_code_0_copy_success(
    bounty_setup, exploit_agent, execute_fixture
):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=0,
    )

    # Ensure codebase dir exists to avoid file copy errors
    env_path.TMP_CODEBASE_FILES_DIR.mkdir(parents=True, exist_ok=True)

    # Mock the docker output that would be returned by run_exploit
    mock_docker_output = ActionMessage(
        resource_id="test-resource",
        message="Requesting exploit execution",
        additional_metadata={
            "docker_image": "test-image",
            "command": "bash exploit.sh",
            "exit_code": 0,
            "output": "",
            "success": True,
        },
    )

    # We need to patch both _store_exploit AND run_exploit

    exploit_agent_message = ExploitAgentMessage(agent_id="exploit_agent", message=None)

    with patch.object(ExploitAgent, "_run_exploit_verify", return_value=0):
        # Also patch restart_resources to avoid actual resource restarts in tests
        with patch.object(ExploitAgent, "_apply_exploit_patch", return_value=True):
            await exploit_agent.execute()

    assert "exploit executed successfully" in exploit_agent_message.message.lower()


@pytest.mark.asyncio
async def test_execute_exit_code_1(bounty_setup, exploit_agent, execute_fixture):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=1,
    )

    exploit_agent_message = ExploitAgentMessage(agent_id="exploit_agent", message=None)

    with patch.object(ExploitAgent, "_run_exploit_verify", return_value=1):
        with patch.object(ExploitAgent, "_apply_exploit_patch", return_value=True):
            await exploit_agent.execute()
    assert "exploit failed" in exploit_agent_message.message.lower()


@pytest.mark.asyncio
async def test_execute_exit_code_2(bounty_setup, exploit_agent, execute_fixture):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    exploit_script_dir_path = Path(env_path.TMP_EXPLOIT_SCRIPT_DIR)
    write_to_file_and_make_executable(
        script_path=exploit_script_dir_path,
        exit_code=2,
    )

    exploit_agent_message = ExploitAgentMessage(agent_id="exploit_agent", message=None)

    with patch.object(ExploitAgent, "_run_exploit_verify", return_value=1):
        with patch.object(ExploitAgent, "_apply_exploit_patch", return_value=True):
            await exploit_agent.execute()
    assert "exploit failed" in exploit_agent_message.message.lower()


@pytest.mark.asyncio
async def test_execute_restart_resources_failed(bounty_setup, exploit_agent):
    env_path: EnvPath = bounty_setup
    exploit_agent: ExploitAgent = exploit_agent

    def mock_restart_resources(self):
        raise Exception

    exploit_agent_message = ExploitAgentMessage(agent_id="exploit_agent", message=None)

    with patch.object(ExploitAgent, "_restart_resource", mock_restart_resources):
        await exploit_agent.execute()

    assert "error during exploit execution" in exploit_agent_message.message.lower()


def test_restart_resources_order(bounty_setup):
    """Test that resources are restarted in the correct order: repo_setup first, then bounty_setup."""
    env_path: EnvPath = bounty_setup

    # Create a custom agent with mocked resources and a mocked _restart_resource to track call order
    agent = ExploitAgent(
        agent_id="test_exploit_agent",
        agent_config=ExploitAgentConfig(
            bounty_dir=env_path.BOUNTY_DIR,
            task_dir=env_path.TASK_DIR,
            tmp_dir=env_path.TMP_DIR,
        ),
    )

    # Create mock attributes to simulate resource existence
    restart_order = []

    def mock_restart(resource):
        restart_order.append(resource.resource_id)
        return True

    # Add mock resources to the agent
    agent.resources.repo_setup = MagicMock()
    agent.resources.repo_setup.resource_id = "repo_setup"
    agent.resources.bounty_setup = MagicMock()
    agent.resources.bounty_setup.resource_id = "bounty_setup"

    # Override the _restart_resource method to track call order
    with patch.object(ExploitAgent, "_restart_resource", side_effect=mock_restart):
        # Call restart_resources
        agent.restart_resources()

    # Verify repo_setup was restarted before bounty_setup
    assert restart_order == ["repo_setup", "bounty_setup"]


# "uses" the import
if None:
    bounty_setup

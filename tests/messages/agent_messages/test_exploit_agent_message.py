import unittest
from unittest.mock import MagicMock, PropertyMock, patch

from messages.action_messages.action_message import ActionMessage
from messages.agent_messages.agent_message import AgentMessage
from messages.agent_messages.exploit_agent_message import ExploitAgentMessage
from messages.message import Message


class TestExploitAgentMessage(unittest.TestCase):

    def setUp(self):
        """
        Setup common mocks for all test cases.
        """
        # Mock log_message
        patcher = patch("messages.message_utils.log_message")
        self.mock_log_message = patcher.start()
        self.addCleanup(patcher.stop)

    def test_inheritance(self):
        """
        Test that ExploitAgentMessage correctly inherits from AgentMessage.
        """
        exploit_agent_message = ExploitAgentMessage("test_id", "test_msg")
        self.assertIsInstance(exploit_agent_message, AgentMessage)
        self.assertIsInstance(exploit_agent_message, Message)

    def test_initialization(self):
        """
        Test ExploitAgentMessage Initialization.
        """
        prev_message = MagicMock(spec=AgentMessage)
        exploit_agent_message = ExploitAgentMessage(
            "test_id", "test_msg", True, prev=prev_message
        )

        # Assertions
        self.assertEqual(exploit_agent_message.agent_id, "test_id")
        self.assertEqual(exploit_agent_message.message, "test_msg")
        self.assertEqual(exploit_agent_message.success, True)
        self.assertIs(exploit_agent_message.prev, prev_message)

    @patch.object(AgentMessage, "to_broadcast_dict")
    def test_to_broadcast_dict(self, mock_super_broadcast):
        """
        Test to_broadcast_dict method.
        """
        # Setup the mock to return a base dictionary
        mock_super_broadcast.return_value = {
            "agent_id": "test_id",
            "message": "test_msg",
            "current_children": [],
        }

        # Create an exploit agent message
        exploit_agent_message = ExploitAgentMessage("test_id", "test_msg", success=True)

        # Call to_broadcast_dict
        broadcast_dict = exploit_agent_message.to_broadcast_dict()

        # Assertions
        self.assertEqual(broadcast_dict["agent_id"], "test_id")
        self.assertEqual(broadcast_dict["message"], "test_msg")
        self.assertEqual(broadcast_dict["success"], True)
        self.assertIn("current_children", broadcast_dict)
        mock_super_broadcast.assert_called_once()

    @patch.object(AgentMessage, "to_log_dict")
    def test_to_log_dict(self, mock_super_log):
        """
        Test to_log_dict method.
        """
        # Setup the mock to return a base dictionary
        mock_super_log.return_value = {
            "agent_id": "test_id",
            "message": "test_msg",
            "action_messages": None,
        }

        # Create exploit agent message
        exploit_agent_message = ExploitAgentMessage(
            "test_id",
            "test_msg",
            success=True,
        )

        # Call to_log_dict
        log_dict = exploit_agent_message.to_log_dict()

        # Assertions
        self.assertEqual(log_dict["agent_id"], "test_id")
        self.assertEqual(log_dict["message"], "test_msg")
        self.assertEqual(log_dict["success"], True)
        self.assertIn("action_messages", log_dict)
        mock_super_log.assert_called_once()

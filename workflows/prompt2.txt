Could we do something smarter, more akin to 2. Introduce a dedicated ResourceManager. I think the approach would basically be:

Each Agent defines the Resources it needs. 
Each Phase has N associated Agents with K Resources.
Then, the ResourceManager dynamically handles Resource allocation and release based on the defined Resources.

This would involve creating a ResourceGraph (or PhaseGraph).
Here, you start at the first phase. 

Let me write some pseudocode:

root_phase = self.root_phase
resources = root_phase.resources
for child in root_phase.children:
    # 

Actually, we don't need to compute the entire graph beforehand.
Well we do if we want to be smart (i.e. know whether to retain a resource later)
Ok let's continue with psuedocode

root_phase = self.root_phase
resources = root_phase.resources
for child in root_phase.children:
    #go through children and see which resources are retained until when

Then for each Resource, there is an initialization phase and a termination phase. i.e. 

imagine:
Resources: R1, R2, R3
Phases: P1, P2, P3

P1: R1, R2
P2: R1, R3
P3: R2

Then:
R1: Init_phase P1, termination P2
R2: Init_phase P1, termination P3
R3: Init_phase P2, termination P2


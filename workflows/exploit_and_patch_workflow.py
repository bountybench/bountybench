import os
from pathlib import Path

from agents.dataclasses.agent_lm_spec import AgentLMConfig
from agents.patch_agent.patch_agent import PatchAgent, PatchAgentConfig
from agents.exploit_agent.exploit_agent import ExploitAgent, ExploitAgentConfig
from agents.executor_agent.prompt import EXPLOIT_AND_PATCH_PROMPT, STOP_TOKEN
from agents.executor_agent.executor_agent import ExecutorAgent, ExecutorAgentConfig
from phases.base_phase import PhaseConfig
from phases.exploit_phase import ExploitPhase
from phases.patch_phase import PatchPhase
from resources.docker_resource import DockerResource, DockerResourceConfig
from resources.kali_env_resource import KaliEnvResource, KaliEnvResourceConfig
from resources.utils import read_exploit_report
from utils.logger import get_main_logger
from workflows.base_workflow import BaseWorkflow

logger = get_main_logger(__name__)

class ExploitAndPatchWorkflow(BaseWorkflow):
    """Workflow for exploiting and patching vulnerabilities"""
    
    PHASES = [ExploitPhase, PatchPhase]
    # Agents = ExecutorAgent, ExploitAgent, PatchAgent
    # Resource =  KaliEnvResource, DockerResource (InitFilesResource, (maybe SetupFilesResource (2x)) handled in super)
    exploit_files_path = None
    patch_files_path = None

    def __init__(self, task_repo_dir: Path, bounty_number: str, interactive: bool = False):
        workflow_id = "exploit_and_patch_workflow"
        self.interactive = interactive
        super().__init__(task_repo_dir, bounty_number, workflow_id, interactive)     

    def define_resource_configs(self) -> None:
        """Configure resources"""
        super().define_resource_configs()
                
        # Create exploit_files and patch_files dir for KaliEnvResource volumes
        tmp_dir = os.path.join(str(self.task_repo_dir), "tmp")
        self.exploit_files_path = os.path.join(tmp_dir, "exploit_files")
        self.patch_files_path = os.path.join(tmp_dir, "patch_files")

        os.makedirs(self.exploit_files_path, exist_ok=True)
        os.makedirs(self.patch_files_path, exist_ok=True)
        logger.info(f"Created exploit_files directory at: {self.exploit_files_path}")
        logger.info(f"Created patch_files directory at: {self.patch_files_path}")

        kali_env_config = KaliEnvResourceConfig(
            task_repo_dir=self.task_repo_dir,
            bounty_number=self.bounty_number,
            volumes={
                os.path.abspath(tmp_dir): {"bind": "/app", "mode": "rw"},
                os.path.abspath(self.exploit_files_path): {"bind": "/app/exploit_files", "mode": "rw"},
                os.path.abspath(self.patch_files_path): {"bind": "/app/patch_files", "mode": "rw"},
                "/tmp": {"bind": "/tmp", "mode": "rw"}
            }
        )
        self.register_resource("kali_env", KaliEnvResource, kali_env_config)

        docker_config = DockerResourceConfig()
        self.register_resource("docker", DockerResource, docker_config)

    def define_agent_configs(self) -> None:
        """Configure agents"""
        executor_agent_lm_config = AgentLMConfig(
            model="anthropic/claude-3-5-sonnet-20240620",
            max_output_tokens=4096,
            max_input_tokens=4096,
            max_iterations=25,
            max_iterations_stored_in_memory=3,
            use_helm=True
        )

        executor_agent_config = ExecutorAgentConfig(
            id="executor_agent",
            lm_config=executor_agent_lm_config,
            # logger=self.workflow_logger,
            target_host=self.repo_metadata["target_host"]
        )
        self.register_agent(ExecutorAgent, executor_agent_config)
                
        exploit_agent_config = ExploitAgentConfig(
            id="exploit_agent",
            bounty_dir=os.path.join("bounties", f"bounty_{self.bounty_number}")
            )
        self.register_agent(ExploitAgent, exploit_agent_config)

        patch_agent_config = PatchAgentConfig(
            id="patch_agent",
            bounty_dir=os.path.join("bounties", f"bounty_{self.bounty_number}")
            )
        self.register_agent(PatchAgent, patch_agent_config)

    def define_phase_configs(self) -> None:
        """Define workflow phase configs"""
        if "executor_agent" not in self.agents:
            raise ValueError("Missing required agent: 'executor_agent'.")
        if "exploit_agent" not in self.agents:
            raise ValueError("Missing required agent: 'exploit_agent'.")
        if "patch_agent" not in self.agents:
            raise ValueError("Missing required agent: 'patch_agent'.")

        exploit_config = PhaseConfig(
            phase_idx=0,
            phase_name=ExploitPhase,
            max_iterations=20,
            agents=[
                ("executor_agent", self.agents["executor_agent"]),
                ("exploit_agent", self.agents["exploit_agent"]),
            ],
        )
        self.register_phase(ExploitPhase, exploit_config)     

        patch_config = PhaseConfig(
            phase_idx=1,
            phase_name=PatchPhase,
            max_iterations=5,
            agents=[
                ("executor_agent", self.agents["executor_agent"]),
                ("patch_agent", self.agents["patch_agent"]),
            ],
        )
        self.register_phase(PatchPhase, patch_config)     

    def get_initial_prompt(self):
        exploit_report = read_exploit_report(self.task_repo_dir, self.bounty_number)
        prompt = EXPLOIT_AND_PATCH_PROMPT.format(
            task_description=exploit_report,
            stop_token=STOP_TOKEN,
            target_host=self.repo_metadata["target_host"],
        )
        return prompt
    
    def setup_directories(self) -> None:
        """No necessary directories for this workflow."""
        pass

def main() -> None:
    """Main entry point"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Run the exploit and patch workflow")
    parser.add_argument("--task_repo_dir", type=str, help="The directory of the task repo")
    parser.add_argument("--bounty_number", type=str, help="The bounty number")
    parser.add_argument("--interactive", action="store_true", help="Run in interactive mode")
    args = parser.parse_args()
    
    # Create logs directory
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # Run workflow
    workflow = ExploitAndPatchWorkflow(Path(args.task_repo_dir), args.bounty_number, args.interactive)
    workflow.run()

if __name__ == "__main__":
    main()
